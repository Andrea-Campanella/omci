/*
 * Copyright (c) 2018 - present.  Boling Consulting Solutions (bcsw.net)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * NOTE: This file was generated, manual edits will be overwritten!
 *
 * Generated by 'goCodeGenerator.py':
 *              https://github.com/cboling/OMCI-parser
 */
package generated

import (
	"../../omci"
	"errors"
	"fmt"
	"github.com/google/gopacket"
	"math/bits"
)

// ManagedEntityInfo provides ManagedEntity information
type ManagedEntityInfo struct {
	//Interface  IManagedEntity
	New func(params ...ParamData) (IManagedEntity, error)
}

// ParamData can be passed to the 'New' function to dictate how the returned
// Managed Entity is created. You should supply either zero or one ParamData
// structure to 'New'.
//
// If No ParamData is passed, the returned Managed Entity can only be used for
// providing validation of other structures. This is commonly done in a packet
// encoder/decoder to assist in that process.
//
// If One ParamData is passed, the returned Managed Entity will be initialized
// with the given values/attributes and then validated. This is commonly done
// when you wish to create an ME for transmission, storage or removal from a
// persistent database, or some other similar purpose.
//
type ParamData struct {
	EntityID   uint16
	Attributes []omci.IAttribute
}

// CreateME wraps a function that makes it a creator of a Managed Entity
type CreateME func(params ...ParamData) (IManagedEntity, error)

var classToManagedEntityMap map[uint16]CreateME

func init() {
	// Create mapping of 16-bit managed entity class IDs to ME-type
	classToManagedEntityMap = make(map[uint16]CreateME, 61)

	classToManagedEntityMap[2] = NewOnuData
	classToManagedEntityMap[5] = NewCardholder
	classToManagedEntityMap[6] = NewCircuitPack
	classToManagedEntityMap[7] = NewSoftwareImage
	classToManagedEntityMap[11] = NewPhysicalPathTerminationPointEthernetUni
	classToManagedEntityMap[24] = NewEthernetPerformanceMonitoringHistoryData
	classToManagedEntityMap[45] = NewMacBridgeServiceProfile
	classToManagedEntityMap[47] = NewMacBridgePortConfigurationData
	classToManagedEntityMap[53] = NewPhysicalPathTerminationPointPotsUni
	classToManagedEntityMap[58] = NewVoiceServiceProfile
	classToManagedEntityMap[84] = NewVlanTaggingFilterData
	classToManagedEntityMap[130] = NewIeee8021PMapperServiceProfile
	classToManagedEntityMap[131] = NewOltG
	classToManagedEntityMap[133] = NewOnuPowerShedding
	classToManagedEntityMap[134] = NewIpHostConfigData
	classToManagedEntityMap[135] = NewIpHostPerformanceMonitoringHistoryData
	classToManagedEntityMap[136] = NewTcpUdpConfigData
	classToManagedEntityMap[137] = NewNetworkAddress
	classToManagedEntityMap[138] = NewVoipConfigData
	classToManagedEntityMap[139] = NewVoipVoiceCtp
	classToManagedEntityMap[142] = NewVoipMediaProfile
	classToManagedEntityMap[143] = NewRtpProfileData
	classToManagedEntityMap[148] = NewAuthenticationSecurityMethod
	classToManagedEntityMap[150] = NewSipAgentConfigData
	classToManagedEntityMap[151] = NewSipAgentPerformanceMonitoringHistoryData
	classToManagedEntityMap[152] = NewSipCallInitiationPerformanceMonitoringHistoryData
	classToManagedEntityMap[153] = NewSipUserData
	classToManagedEntityMap[155] = NewMgcConfigData
	classToManagedEntityMap[156] = NewMgcPerformanceMonitoringHistoryData
	classToManagedEntityMap[158] = NewOnuRemoteDebug
	classToManagedEntityMap[171] = NewExtendedVlanTaggingOperationConfigurationData
	classToManagedEntityMap[262] = NewTCont
	classToManagedEntityMap[263] = NewAniG
	classToManagedEntityMap[264] = NewUniG
	classToManagedEntityMap[266] = NewGemInterworkingTerminationPoint
	classToManagedEntityMap[268] = NewGemPortNetworkCtp
	classToManagedEntityMap[272] = NewGalEthernetProfile
	classToManagedEntityMap[273] = NewThresholdData1
	classToManagedEntityMap[274] = NewThresholdData2
	classToManagedEntityMap[277] = NewPriorityQueue
	classToManagedEntityMap[278] = NewTrafficScheduler
	classToManagedEntityMap[280] = NewTrafficDescriptor
	classToManagedEntityMap[281] = NewMulticastGemInterworkingTerminationPoint
	classToManagedEntityMap[287] = NewOmci
	classToManagedEntityMap[290] = NewDot1XPortExtensionPackage
	classToManagedEntityMap[299] = NewDot1AgMaintenanceDomain
	classToManagedEntityMap[300] = NewDot1AgMaintenanceAssociation
	classToManagedEntityMap[302] = NewDot1AgMep
	classToManagedEntityMap[305] = NewDot1AgCfmStack
	classToManagedEntityMap[310] = NewMulticastSubscriberConfigInfo
	classToManagedEntityMap[321] = NewEthernetFramePerformanceMonitoringHistoryDataDownstream
	classToManagedEntityMap[322] = NewEthernetFramePerformanceMonitoringHistoryDataUpstream
	classToManagedEntityMap[329] = NewVirtualEthernetInterfacePoint
	classToManagedEntityMap[332] = NewEnhancedSecurityControl
	classToManagedEntityMap[335] = NewSnmpConfigurationData
	classToManagedEntityMap[336] = NewOnuDynamicPowerManagementControl
	classToManagedEntityMap[340] = NewBbfTr069ManagementServer
	classToManagedEntityMap[341] = NewGemPortNetworkCtpPerformanceMonitoringHistoryData
	classToManagedEntityMap[344] = NewXgPonTcPerformanceMonitoringHistoryData
	classToManagedEntityMap[345] = NewXgPonDownstreamManagementPerformanceMonitoringHistoryData
	classToManagedEntityMap[346] = NewXgPonUpstreamManagementPerformanceMonitoringHistoryData
}

func decodeEntityID(params ...ParamData) uint16 {
	if len(params) > 0 {
		return params[0].EntityID
	}
	return 0
}

type IManagedEntity interface {
	Name() string
	ClassID() uint16
	EntityID() uint16
	MessageTypes() []omci.MsgType
	AttributesMask() uint16
	Attributes() []omci.IAttribute
	Decode(uint16, []byte, gopacket.DecodeFeedback) error
	SerializeTo(uint16, gopacket.SerializeBuffer) error
}

type BaseManagedEntity struct {
	name          string
	classID       uint16
	entityID      uint16
	msgTypes      []omci.MsgType
	attributeMask uint16
	attributeList []omci.IAttribute
}

func (bme *BaseManagedEntity) Name() string                  { return bme.name }
func (bme *BaseManagedEntity) ClassID() uint16               { return bme.classID }
func (bme *BaseManagedEntity) EntityID() uint16              { return bme.entityID }
func (bme *BaseManagedEntity) MessageTypes() []omci.MsgType  { return bme.msgTypes }
func (bme *BaseManagedEntity) AttributesMask() uint16        { return bme.attributeMask }
func (bme *BaseManagedEntity) Attributes() []omci.IAttribute { return bme.attributeList }

func (bme *BaseManagedEntity) String() string {
	return fmt.Sprintf("%v: CID: %v (%#x), EID: %v (%#x), Attributes: %v",
		bme.Name(), bme.ClassID(), bme.ClassID(), bme.EntityID(), bme.EntityID(),
		bme.Attributes())
}

func (bme *BaseManagedEntity) Decode(mask uint16, data []byte, df gopacket.DecodeFeedback) error {
	// Validate attribute mask passed in
	if mask&^bme.attributeMask > 0 {
		return errors.New("invalid attribute mask specified") // Unsupported bits set
	}
	// Loop over possible attributes
	for index := 0; index < bits.OnesCount16(bme.attributeMask); index++ {
		// If bit is set, decode that attribute
		if mask&uint16(1<<(15-uint(index))) > 0 {
			// Pull from list
			attribute := bme.attributeList[index]

			// decode & advance data slice if success
			err := attribute.DecodeFromBytes(data, df)
			if err != nil {
				return err
			}
			data = data[attribute.Size():]
		}
	}
	return nil
}

func (bme *BaseManagedEntity) SerializeTo(mask uint16, b gopacket.SerializeBuffer) error {
	// Validate attribute mask passed in
	if mask&^bme.attributeMask > 0 {
		return errors.New("invalid attribute mask specified") // Unsupported bits set
	}
	// Loop over possible attributes
	for index := 0; index < bits.OnesCount16(bme.attributeMask); index++ {
		// If bit is set, decode that attribute
		if mask&uint16(1<<(15-uint(index))) > 0 {
			// Pull from list
			attribute := bme.attributeList[index]

			// encode
			err := attribute.SerializeTo(b)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (bme *BaseManagedEntity) computeAttributeMask() {
	for index := range bme.Attributes() {
		bme.attributeMask |= 1 << (15 - uint(index))
	}
}
